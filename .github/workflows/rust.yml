name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
    - name: Git Version
      id: version
      uses: codacy/git-version@2.7.1
      with:
        release-branch: main
    outputs:
      version: ${{ steps.version.outputs.version }}

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: sudo apt install libdbus-1-dev pkg-config
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Run tests
      run: cargo test --verbose

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: sudo apt install libdbus-1-dev pkg-config
    - name: Install rustfmt and clippy
      run: rustup component add rustfmt clippy
#    - name: Run rustfmt
#      run: cargo fmt -- --check
#    - name: Run clippy
#      run: cargo clippy -- -D warnings

  linux-x64:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Apt-get pre-reqs
      run: sudo apt install libdbus-1-dev pkg-config

    - name: Build
      run: |
        rustup target add x86_64-unknown-linux-gnu
        cargo build --release --target x86_64-unknown-linux-gnu --verbose 

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64
        path: |
          target/*/release/*.dylib
          target/*/release/*.so
          target/*/release/*.dll
          target/*/release/*.pdb
        retention-days: 7

  linux-arm64:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Apt-get pre-reqs
      run: sudo apt install libdbus-1-dev pkg-config

    - name: Install cross-compilation tools
      run: |
        sudo apt-get install \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          libc6-dev-arm64-cross \
          pkg-config-aarch64-linux-gnu \
          libdbus-1-dev:arm64
          
    - name: Build
      run: |
        rustup target add aarch64-unknown-linux-gnu
        cargo build --release --target aarch64-unknown-linux-gnu --verbose 

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64
        path: |
          target/*/release/*.dylib
          target/*/release/*.so
          target/*/release/*.dll
          target/*/release/*.pdb
        retention-days: 7

  macos-x64:
    runs-on: macos-13
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: |
        rustup target add x86_64-apple-darwin
        cargo build --release --target x86_64-apple-darwin --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-x64
        path: |
          target/*/release/*.dylib
          target/*/release/*.so
          target/*/release/*.dll
          target/*/release/*.pdb
        retention-days: 7

  macos-arm64:
    runs-on: macos-13
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-arm64-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: |
        rustup target add aarch64-apple-darwin
        cargo build --release --target aarch64-apple-darwin --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm64
        path: |
          target/*/release/*.dylib
          target/*/release/*.so
          target/*/release/*.dll
          target/*/release/*.pdb
        retention-days: 7

  windows-x64:
    runs-on: windows-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: |
        rustup target add x86_64-pc-windows-msvc
        cargo build --release --target x86_64-pc-windows-msvc --verbose
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: win-x64
        path: |
          target/*/release/*.dylib
          target/*/release/*.so
          target/*/release/*.dll
          target/*/release/*.pdb
        retention-days: 7

  release-and-tag:
    runs-on: ubuntu-latest
    needs: [version, linux-x64, macos-x64, macos-arm64, windows-x64]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Tag the commit
      run: |
        git config --global user.email "no-reply@vaettir.net"
        git config --global user.name "Tagger"
        git tag -a ${{ needs.version.outputs.version }} -m "Version ${{ needs.version.outputs.version }}"
        git push --follow-tags

    - uses: actions/download-artifact@v4
      with:
        path: target

    - name: Pack binaries
      run: |
        tar -czvf binaries.tar.gz target   

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.version }}
        name: Release ${{ needs.version.outputs.version }}
        body: |
          # Release ${{ needs.version.outputs.version }}
          
          Automatically generated release for btleplug-c.
          
          ## Included Artifacts
          - Linux x64
          - Linux ARM64
          - macOS x64
          - macOS ARM64 (Apple Silicon)
          - Windows x64
        draft: true
        prerelease: false
        files: ./binaries.tar.gz